"use strict";(self.webpackChunkbooks_summary=self.webpackChunkbooks_summary||[]).push([[911],{2305:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"software-development/refactoring","title":"Refactoring - Improving the Design of Existing Code - Martin Fowler","description":"General Overview","source":"@site/docs/software-development/refactoring.md","sourceDirName":"software-development","slug":"/software-development/refactoring","permalink":"/books-summary/docs/software-development/refactoring","draft":false,"unlisted":false,"editUrl":"https://github.com/razzeguimohamedzied/books-summary/tree/main/docs/software-development/refactoring.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Clean Code - A handbook of agile software craftsmanship - Robert C. Martin","permalink":"/books-summary/docs/software-development/clean-code"},"next":{"title":"Psychology & Behavior","permalink":"/books-summary/docs/category/psychology--behavior"}}');var t=n(4848),a=n(8453);const o={},s="Refactoring - Improving the Design of Existing Code - Martin Fowler",c={},l=[{value:"General Overview",id:"general-overview",level:2},{value:"Chapter Summaries",id:"chapter-summaries",level:2},{value:"Chapter 1: Refactoring \u2013 A First Example",id:"chapter-1-refactoring--a-first-example",level:3},{value:"Chapter 2: Principles in Refactoring",id:"chapter-2-principles-in-refactoring",level:3},{value:"Chapter 3: Bad Smells in Code",id:"chapter-3-bad-smells-in-code",level:3},{value:"Chapter 4: Building Tests",id:"chapter-4-building-tests",level:3},{value:"Chapter 5: Introducing the Refactoring Catalog",id:"chapter-5-introducing-the-refactoring-catalog",level:3},{value:"Chapter 6: Composing Methods",id:"chapter-6-composing-methods",level:3},{value:"Chapter 7: Encapsulation",id:"chapter-7-encapsulation",level:3},{value:"Chapter 8: Moving Features Between Objects",id:"chapter-8-moving-features-between-objects",level:3},{value:"Chapter 9: Organizing Data",id:"chapter-9-organizing-data",level:3},{value:"Chapter 10: Simplifying Conditional Expressions",id:"chapter-10-simplifying-conditional-expressions",level:3},{value:"Chapter 11: Refactoring APIs",id:"chapter-11-refactoring-apis",level:3},{value:"Chapter 12: Dealing with Generalization",id:"chapter-12-dealing-with-generalization",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const i={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"refactoring---improving-the-design-of-existing-code---martin-fowler",children:"Refactoring - Improving the Design of Existing Code - Martin Fowler"})}),"\n",(0,t.jsx)(i.h2,{id:"general-overview",children:"General Overview"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.em,{children:"Refactoring"})," by Martin Fowler is a guide to improving existing code without changing its external behavior. The book introduces refactoring techniques that enhance code readability, maintainability, and performance. It emphasizes a disciplined approach to modifying code incrementally while ensuring stability through automated testing."]}),"\n",(0,t.jsx)(i.p,{children:"Fowler defines refactoring as a controlled process of restructuring code by applying small, behavior-preserving transformations. The book includes practical examples, a catalog of common refactorings, and insights into when and why to refactor."}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"chapter-summaries",children:"Chapter Summaries"}),"\n",(0,t.jsx)(i.h3,{id:"chapter-1-refactoring--a-first-example",children:"Chapter 1: Refactoring \u2013 A First Example"}),"\n",(0,t.jsx)(i.p,{children:"Demonstrates refactoring through a real-world example. Shows how to improve messy code by applying small, systematic changes while preserving behavior."}),"\n",(0,t.jsx)(i.h3,{id:"chapter-2-principles-in-refactoring",children:"Chapter 2: Principles in Refactoring"}),"\n",(0,t.jsx)(i.p,{children:"Explains the motivation behind refactoring. Discusses the benefits, including improved code readability, reusability, and easier debugging."}),"\n",(0,t.jsx)(i.h3,{id:"chapter-3-bad-smells-in-code",children:"Chapter 3: Bad Smells in Code"}),"\n",(0,t.jsx)(i.p,{children:'Introduces the concept of "code smells"\u2014symptoms of poorly structured code. Provides examples such as duplicate code, long methods, large classes, and feature envy.'}),"\n",(0,t.jsx)(i.h3,{id:"chapter-4-building-tests",children:"Chapter 4: Building Tests"}),"\n",(0,t.jsx)(i.p,{children:"Emphasizes the importance of automated tests in refactoring. Advocates for test-driven development (TDD) and regression testing to ensure code changes do not introduce bugs."}),"\n",(0,t.jsx)(i.h3,{id:"chapter-5-introducing-the-refactoring-catalog",children:"Chapter 5: Introducing the Refactoring Catalog"}),"\n",(0,t.jsx)(i.p,{children:"Provides an overview of common refactorings. Introduces the refactoring catalog, which lists transformations for improving code structure."}),"\n",(0,t.jsx)(i.h3,{id:"chapter-6-composing-methods",children:"Chapter 6: Composing Methods"}),"\n",(0,t.jsxs)(i.p,{children:["Covers refactorings that improve method clarity. Examples include: ",(0,t.jsx)(i.code,{children:"Extract Method"}),", ",(0,t.jsx)(i.code,{children:"Inline Method"})," ..."]}),"\n",(0,t.jsx)(i.h3,{id:"chapter-7-encapsulation",children:"Chapter 7: Encapsulation"}),"\n",(0,t.jsxs)(i.p,{children:["Explains how to improve object-oriented design by encapsulating data and behavior. Examples include: ",(0,t.jsx)(i.code,{children:"Encapsulate Collection"}),", ",(0,t.jsx)(i.code,{children:"Replace Primitive with Object"})," ..."]}),"\n",(0,t.jsx)(i.h3,{id:"chapter-8-moving-features-between-objects",children:"Chapter 8: Moving Features Between Objects"}),"\n",(0,t.jsxs)(i.p,{children:["Explains how to improve object-oriented design by properly distributing responsibilities among classes. Examples include: ",(0,t.jsx)(i.code,{children:"Move Method"}),", ",(0,t.jsx)(i.code,{children:"Move Field"})," ..."]}),"\n",(0,t.jsx)(i.h3,{id:"chapter-9-organizing-data",children:"Chapter 9: Organizing Data"}),"\n",(0,t.jsxs)(i.p,{children:["Discusses refactoring techniques for improving data structure usage. Examples include: ",(0,t.jsx)(i.code,{children:"Split Variable"}),", ",(0,t.jsx)(i.code,{children:"Rename Field"})," ..."]}),"\n",(0,t.jsx)(i.h3,{id:"chapter-10-simplifying-conditional-expressions",children:"Chapter 10: Simplifying Conditional Expressions"}),"\n",(0,t.jsxs)(i.p,{children:["Presents techniques to reduce complex conditional logic. Examples include: ",(0,t.jsx)(i.code,{children:"Decomposing Conditionals"}),", ",(0,t.jsx)(i.code,{children:"Replacing Conditionals with Polymorphism"})," ..."]}),"\n",(0,t.jsx)(i.h3,{id:"chapter-11-refactoring-apis",children:"Chapter 11: Refactoring APIs"}),"\n",(0,t.jsxs)(i.p,{children:["Covers strategies for improving API design. Examples include: ",(0,t.jsx)(i.code,{children:"Separate Query from Modifier"}),", ",(0,t.jsx)(i.code,{children:"Parameterize Method"})," ..."]}),"\n",(0,t.jsx)(i.h3,{id:"chapter-12-dealing-with-generalization",children:"Chapter 12: Dealing with Generalization"}),"\n",(0,t.jsxs)(i.p,{children:["Covers refactorings related to inheritance and abstraction. Examples include: ",(0,t.jsx)(i.code,{children:"Pull Up Method"}),", ",(0,t.jsx)(i.code,{children:"Push Down Method"}),", ",(0,t.jsx)(i.code,{children:"Extract Interface"})," ..."]}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.em,{children:"Refactoring"})," is a crucial skill for software developers, enabling incremental improvements while maintaining system stability. By recognizing code smells and applying systematic refactoring techniques, developers can enhance code quality, reduce technical debt, and make future development more efficient."]})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>s});var r=n(6540);const t={},a=r.createContext(t);function o(e){const i=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(a.Provider,{value:i},e.children)}}}]);